var documenterSearchIndex = {"docs":
[{"location":"#PressureFieldContact-1","page":"Home","title":"PressureFieldContact","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This module implements the elastic foundation-themed contact model for rigid body dynamics described in this short video. This paper describes the method in greater detail.","category":"page"},{"location":"#Design-1","page":"Home","title":"Design","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Words here","category":"page"},{"location":"#","page":"Home","title":"Home","text":"bullet point?\nanother?","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"To install you","category":"page"},{"location":"#PressureFieldContact.jl-Documentation-1","page":"Home","title":"PressureFieldContact.jl Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Functions-1","page":"Home","title":"Functions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"calcXd!","category":"page"},{"location":"#PressureFieldContact.calcXd!","page":"Home","title":"PressureFieldContact.calcXd!","text":"calcXd!(xx, x, m, tm, t)\n\nConventions: n̂ refers to the contact surface normal that points into body B v_cart refers to + velocity of B - the velocity of A the wrench is the wrench applied TO body A\n\n\n\n\n\n","category":"function"},{"location":"#Index-1","page":"Home","title":"Index","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"algorithms/#Algorithms-1","page":"Algorithms","title":"Algorithms","text":"","category":"section"},{"location":"algorithms/#","page":"Algorithms","title":"Algorithms","text":"There is no content here yet.","category":"page"},{"location":"geometry/#Geometry-1","page":"Geometry","title":"Geometry","text":"","category":"section"},{"location":"geometry/#","page":"Geometry","title":"Geometry","text":"This contact implementation represents rigid objects with triangular meshes and compliant objects with tetrahedral meshes. This package uses the custom geometry data type eMesh. Convince functions to create meshes for common shapes are documented below.","category":"page"},{"location":"geometry/#","page":"Geometry","title":"Geometry","text":"Modules = [PressureFieldContact.Geometry]\nOrder   = [:type]\nPages   = [\"mesh.jl\"]","category":"page"},{"location":"geometry/#PressureFieldContact.Geometry.eMesh","page":"Geometry","title":"PressureFieldContact.Geometry.eMesh","text":"struct eMesh{T1<:Union{Nothing, Tri}, T2<:Union{Nothing, Tet}}\n\nData structure for holding geometry data.\n\n\n\n\n\n","category":"type"},{"location":"geometry/#Basic-Shapes-1","page":"Geometry","title":"Basic Shapes","text":"","category":"section"},{"location":"geometry/#","page":"Geometry","title":"Geometry","text":"output_eMesh_box\noutput_eMesh_sphere\noutput_eMesh_half_plane","category":"page"},{"location":"geometry/#PressureFieldContact.Geometry.output_eMesh_box","page":"Geometry","title":"PressureFieldContact.Geometry.output_eMesh_box","text":"output_eMesh_box()\noutput_eMesh_box(r)\noutput_eMesh_box(r, c)\n\n\nOutputs an eMesh for a box.\n\n\n\n\n\n","category":"function"},{"location":"geometry/#PressureFieldContact.Geometry.output_eMesh_sphere","page":"Geometry","title":"PressureFieldContact.Geometry.output_eMesh_sphere","text":"output_eMesh_sphere()\noutput_eMesh_sphere(rad)\noutput_eMesh_sphere(rad, n_div)\n\n\nOutputs an eMesh for a sphere. Larger values of n_div create finer discretizations.\n\n\n\n\n\n","category":"function"},{"location":"geometry/#PressureFieldContact.Geometry.output_eMesh_half_plane","page":"Geometry","title":"PressureFieldContact.Geometry.output_eMesh_half_plane","text":"output_eMesh_half_plane()\noutput_eMesh_half_plane(plane_w)\noutput_eMesh_half_plane(plane_w, is_include_vis_sides)\n\n\nOutputs an eMesh for a half-plane.\n\n\n\n\n\n","category":"function"},{"location":"geometry/#Swept-Meshes-1","page":"Geometry","title":"Swept Meshes","text":"","category":"section"},{"location":"geometry/#Rotationally-Symmetric-Meshes-1","page":"Geometry","title":"Rotationally Symmetric Meshes","text":"","category":"section"},{"location":"friction/#Friction-1","page":"Friction","title":"Friction","text":"","category":"section"},{"location":"friction/#","page":"Friction","title":"Friction","text":"This model has two contact models. The first is a smooth version on Coulomb friction. The second is a bristle-type friction model.","category":"page"},{"location":"friction/#Add-friction-1","page":"Friction","title":"Add friction","text":"","category":"section"},{"location":"friction/#","page":"Friction","title":"Friction","text":"add_friction_regularize!\nadd_friction_bristle!","category":"page"},{"location":"friction/#PressureFieldContact.add_friction_regularize!","page":"Friction","title":"PressureFieldContact.add_friction_regularize!","text":"add_friction_regularize!(m, mesh_id_1, mesh_id_2; μs, μd, χ, v_tol)\n\n\nAdds regularized friction to a scenario.\n\n\n\n\n\n","category":"function"},{"location":"friction/#PressureFieldContact.add_friction_bristle!","page":"Friction","title":"PressureFieldContact.add_friction_bristle!","text":"add_friction_bristle!(m, mesh_id_1, mesh_id_c; τ, k̄, μs, μd, χ)\n\n\nAdds bristle friction to a scenario.\n\n\n\n\n\n","category":"function"},{"location":"quick_start/#Quick-Start-1","page":"Quickstart guide","title":"Quick-Start","text":"","category":"section"},{"location":"quick_start/#","page":"Quickstart guide","title":"Quickstart guide","text":"In order to use this module you first need to: 1.) have Julia installed and 2.) install necessary Julia packages.","category":"page"},{"location":"quick_start/#","page":"Quickstart guide","title":"Quickstart guide","text":"The easiest way to install Julia is to download the latest binary.","category":"page"},{"location":"polygon_clipping/#Polygon-clipping-1","page":"Polygon clipping","title":"Polygon clipping","text":"","category":"section"},{"location":"polygon_clipping/#","page":"Polygon clipping","title":"Polygon clipping","text":"Modules = [PressureFieldContact.Tri_Tet_Intersections]\nOrder   = [:function]","category":"page"},{"location":"polygon_clipping/#PressureFieldContact.Tri_Tet_Intersections.clip_in_tet_coordinates-Union{Tuple{poly_eight{4,T}}, Tuple{T}} where T","page":"Polygon clipping","title":"PressureFieldContact.Tri_Tet_Intersections.clip_in_tet_coordinates","text":"clip_in_tet_coordinates(p)\n\n\nCalls clip\n\n\n\n\n\n","category":"method"},{"location":"polygon_clipping/#PressureFieldContact.Tri_Tet_Intersections.clip_plane_tet-Union{Tuple{T}, Tuple{SArray{Tuple{1,4},T,2,4},SArray{Tuple{4,4},T,2,16}}} where T","page":"Polygon clipping","title":"PressureFieldContact.Tri_Tet_Intersections.clip_plane_tet","text":"clip_plane_tet(plane, tet)\n\n\nClips a plane by a tetrahedron. The plane takes the form of a static row matrix The tet takes the form of a static matrix\n\n\n\n\n\n","category":"method"},{"location":"polygon_clipping/#PressureFieldContact.Tri_Tet_Intersections.getTetQuadRule-Tuple{Int64}","page":"Polygon clipping","title":"PressureFieldContact.Tri_Tet_Intersections.getTetQuadRule","text":"getTetQuadRule(n_rule)\n\n\nOutputs the Yu tetrahedron quadrature rules from the Python package quadpy.\n\n\n\n\n\n","category":"method"},{"location":"polygon_clipping/#PressureFieldContact.Tri_Tet_Intersections.getTriQuadRule-Tuple{Int64}","page":"Polygon clipping","title":"PressureFieldContact.Tri_Tet_Intersections.getTriQuadRule","text":"getTriQuadRule(n_rule)\n\n\nOutputs the XiaoGimbutas triangle quadrature rules from the Python package quadpy.\n\n\n\n\n\n","category":"method"},{"location":"polygon_clipping/#PressureFieldContact.Tri_Tet_Intersections.zero_small_coordinates-Union{Tuple{poly_eight{4,T}}, Tuple{T}} where T","page":"Polygon clipping","title":"PressureFieldContact.Tri_Tet_Intersections.zero_small_coordinates","text":"Sets small coondinates of a polygon in tetrahedral coordinates to zero. This function addresses a specific probability one degeneracy that results when clipping an edge in the same place twice.\n\n\n\n\n\n","category":"method"},{"location":"polygon_clipping/#PressureFieldContact.NumericalTricks.centroid-Union{Tuple{T}, Tuple{poly_eight{3,T},SArray{Tuple{3},T,1,3}}} where T","page":"Polygon clipping","title":"PressureFieldContact.NumericalTricks.centroid","text":"centroid(p_new, n̂)\n\n\nFinds the centroid of a 3 dimensional poly_eight by dividing the area into triangles. This funciton requires a reference normal n̂.\n\n\n\n\n\n","category":"method"},{"location":"polygon_clipping/#PressureFieldContact.NumericalTricks.mul_then_un_pad-Union{Tuple{T2}, Tuple{T1}, Tuple{SArray{Tuple{4,4},T1,2,16},poly_eight{4,T2}}} where T2 where T1","page":"Polygon clipping","title":"PressureFieldContact.NumericalTricks.mul_then_un_pad","text":"mul_then_un_pad(m, p)\n\n\nMultiplies a 4 dimensional polygon by a 4x4 matrix and then unpads the 4 dimensional polygon. This function is used to convert a polygon in tetrahedral coordinates to a polygon in Cartesian coordinates.\n\n\n\n\n\n","category":"method"},{"location":"polygon_clipping/#PressureFieldContact.NumericalTricks.one_pad_then_mul-Union{Tuple{T2}, Tuple{T1}, Tuple{SArray{Tuple{4,4},T1,2,16},poly_eight{3,T2}}} where T2 where T1","page":"Polygon clipping","title":"PressureFieldContact.NumericalTricks.one_pad_then_mul","text":"one_pad_then_mul(m, p)\n\n\nOne pads each element of a 3 dimensional polygon and then multiplies it by a 4x4 matrix m. This funciton is used to convert each element of a Cartesian polygon into tetrahedral coordinates.\n\n\n\n\n\n","category":"method"},{"location":"polygon_clipping/#PressureFieldContact.Tri_Tet_Intersections.clip-Union{Tuple{T}, Tuple{SArray{Tuple{4},T,1,4},SArray{Tuple{4},T,1,4},SArray{Tuple{4},T,1,4},Int64}} where T","page":"Polygon clipping","title":"PressureFieldContact.Tri_Tet_Intersections.clip","text":"clip(z1, z2, z3, i)\n\n\nTogether with cut_clip, implements the clipping of polygons by tetrahedra using the Sutherland–Hodgman algorithm. The Sutherland-Hodgman algorithm essentially clips a polygon by one plane at a time. You should not call this function directly. Clipped polygons are assumed to have at most 8 sides. This implementation should correctly handle the case where 2 of fewer vertices lie exactly on a plane.\n\n\n\n\n\n","category":"method"},{"location":"polygon_clipping/#PressureFieldContact.Tri_Tet_Intersections.cut_clip-Union{Tuple{T}, Tuple{SArray{Tuple{4},T,1,4},SArray{Tuple{4},T,1,4},SArray{Tuple{4},T,1,4},Int64}} where T","page":"Polygon clipping","title":"PressureFieldContact.Tri_Tet_Intersections.cut_clip","text":"Removes a non-positive vertex from a polygon.\n\n\n\n\n\n","category":"method"}]
}
